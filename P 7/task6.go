//Здесь используется официальный образ версии Go 1.17 как базовый для сборки и даем название этапу "builder" для многоэтапной сборки
FROM golang:1.17 AS builder

//Создается рабочая директория внутри контейнера
WORKDIR/app

//Копируем файлы "go.mod" и "go.sum" в рабочую директорию контейнера, в этих файлах содержатся зависимости проекта
COPY go.mod go.sum./

//Загружаем зависимости проекта
COPY go mod download

//Копируем весь остальной код проекта в контейнер
COPY..

//Собираем приложение и сохраняем результат в файл "myapp", "-o" - это флаг для указания имени нашего файла
RUN go build -o myapp .

//Здесь начинается следующий этап сборки
//Здесь указывается, что образ основан на последней версии Alpine Linux - дистрибутив Linux, который используется как базовый образ для контейнеров Docker из-за минимального размера
FROM alpine:latest

//Устанавливается рабочая диркектория нашего образа "root"
WORKDIR /root/

//Здесь копируется образ с этапа "builder" в текущий образ
COPY --from=builder /app/myapp .

//А здесь указывается команда, которая будет выполнена при запуске контейнера
CMD ["./myapp"]

//Как будет собираться докер образ?
//Первый этап "builder": создается временный образ на основе "golang: 1.17", затем происходит копирование и загрузка зависимостей Go, копируется весь код проекта и собирается "myapp"
//Второй этап "финальный":Создается образ на основе "alpine:latest", затем из временного образа копируется только "myapp", исходный код и инструменты сборки не попадают в финальный образ

//Какие команды для сборки и запуска контейнера?
//Сборка: "docker build -t myapp"
//Запуск: "docker run -d --name myapp-container myapp"