package main

import (
	"fmt"
	"sync"
)

// Вопрос 1: Нули выводятся потому что горутины запускаются, но "balance()" не ждет завершения и мапа из-за этого может быть пустой или частично заполненной
// Также у нас мапа емкостью 1, а нам нужно 5 элементов туда поместить. Также неправильно происходит блокировка записи в мапу
// Решение: Обязательно нужно создать "WaitGroup", чтобы дождаться завершения всех горутин, это решит проблему с нулями, обязательно увеличиваем емкость мапы до 5
// также кладем в "WaitGroup" по одному значению
// Также освобождаем "Mutex" через "defer" функцию, создаем подсчет через for range, а также создаем функцию "bank_network_call", которая принимает "int" значение и такое же значение возвращает
// в ней имитируем количество запросов
// Вопрос 2: Функция "balance()" будет выполняться тоже 5 секунд, потому что горутины не блокируют друг друга, планировщик Go сам перекалючается между ними
//ну если бы мы не юзали горутины, то все бы выполнялось последовательно и тогда скорость была равна 25 секундам

func main() {
	fmt.Println(balance())
}

func balance() int {
	x := make(map[int]int, 5)
	var m sync.Mutex
	var wg sync.WaitGroup

	for i := 0; i < 5; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()

			b := bank_network_call(i)

			m.Lock()
			x[i] = b
			m.Unlock()
		}(i)
	}

	wg.Wait()

	sumOfMap := 0
	for _, v := range x {
		sumOfMap += v
	}

	return sumOfMap
}

func bank_network_call(i int) int {
	return i * 100
}
